# Default values for state-manager.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: dhnikolas/state-manager
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: false
  httpGet:
    path: /
    port: http
readinessProbe:
  enabled: false
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

configuration:
  annotations: {}

extraEnvs: {}

## Redis subchart configuration
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  ## -- Enables the redis subchart
  enabled: true
  ## Redis image
  image:
    # -- Image registry
    registry: docker.io
    # -- Image repository
    repository: bitnamilegacy/redis
    # -- Image tag
    tag: 6.2.9-debian-11-r0
  # -- Redis architecture. Allowed values: `standalone` or `replication`
  architecture: standalone
  auth:
    # -- Enable password authentication
    enabled: false
  master:
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    persistence:
      ## -- Enable persistence on Redis master nodes using Persistent Volume Claims
      enabled: false
  networkPolicy:
    # -- Enable creation of NetworkPolicy resources
    enabled: false

# External Redis parameters
externalRedis:
  # -- Full url to redis, contains username, password, host and port
  url: ""
  # -- The name of an existing secret with Redis URL (must contain key `url`).
  # When it's set, the `externalRedis.url` parameter is ignored
  existingSecret: ""
  # -- External Redis Secret annotations
  secretAnnotations: {}

## PostgreSQL subchart configuration
# Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  # -- Enables the PostgreSQL subchart
  enabled: true
  ## PostgreSQL Image
  image:
    # -- Image registry
    registry: docker.io
    # -- Image repository
    repository: bitnamilegacy/postgresql
    # -- Image tag
    tag: 16.3.0-debian-12-r22
  auth:
    # -- Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
    postgresPassword: "postgres"
    # -- Name for a custom user to create
    username: state_manager
    # -- Password for the custom user to create
    password: "state_manager"
    # -- Name for a custom database to create
    database: state_manager
    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: ""
  # -- PostgreSQL architecture (`standalone` or `replication`)
  architecture: standalone

# External PostgreSQL parameters
externalPostgresql:
  # -- Full url to postgresql, contains username, password, host and port
  url: ""
  # -- The name of an existing secret with PostgreSQL URL (must contain key `url`).
  # When it's set, the `externalPostgresql.url` parameter is ignored
  existingSecret: ""
  # -- External PostgreSQL Secret annotations
  secretAnnotations: {}

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}