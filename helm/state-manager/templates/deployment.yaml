apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "state-manager.fullname" . }}
  labels:
    {{- include "state-manager.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "state-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "state-manager.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "state-manager.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          # ---------------------------------------------------------------------------------------------------------
          {{- if and (.Values.redis.enabled) (not .Values.externalRedis.host) }}
          - name: REDIS_HOST
            value: {{ include "state-manager.redis.host" . | quote }}
          - name: REDIS_PORT
            value: {{ include "state-manager.redis.port" . | quote }}
          - name: REDIS_USERNAME
            value: redis
          - name: REDIS_DB
            value: '0'
          {{- if .Values.redis.auth.existingSecret }}
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.redis.auth.existingSecret | quote }}
                key: {{ .Values.redis.auth.existingSecretPasswordKey | quote }}
          {{- else }}
          - name: REDIS_PASSWORD
            value: {{ .Values.redis.auth.password | quote }}
          {{- end }}
          {{- else if .Values.externalRedis.host }}
          - name: REDIS_HOST
            value: {{ .Values.externalRedis.host | quote }}
          - name: REDIS_PORT
            value: {{ .Values.externalRedis.port | quote }}
          - name: REDIS_USERNAME
            value: {{ .Values.externalRedis.auth.user | quote }}
          - name: REDIS_DB
            value: {{ .Values.externalRedis.db | quote }}
          {{- if .Values.externalRedis.auth.existingSecret }}
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.externalRedis.auth.existingSecret | quote }}
                key: {{ .Values.externalRedis.auth.secretKeys.passwordKey | quote }}
          {{- else }}
          - name: REDIS_PASSWORD
            value: {{ .Values.externalRedis.auth.password | quote }}
          {{- end }}
          {{- end }}
          # ---------------------------------------------------------------------------------------------------------
          {{- if and (.Values.postgresql.enabled) (not .Values.externalPostgresql.host) }}
          - name: DATABASE_HOST
            value: {{ include "state-manager.postgresql.host" . | quote }}
          - name: DATABASE_PORT
            value: {{ include "state-manager.postgresql.port" . | quote}}
          - name: DATABASE_USERNAME
            value: {{ .Values.postgresql.auth.username | quote }}
          - name: DATABASE_NAME
            value: {{ .Values.postgresql.auth.database | quote }}
          {{- if .Values.postgresql.auth.existingSecret }}
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.postgresql.auth.existingSecret | quote }}
                key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey | quote }}
          {{- else }}
          - name: DATABASE_PASSWORD
            value: {{ .Values.postgresql.auth.password | quote }}
          {{- end }}
          {{- else if .Values.externalPostgresql.host }}
          - name: DATABASE_HOST
            value: {{ .Values.externalPostgresql.host | quote }}
          - name: DATABASE_PORT
            value: {{ .Values.externalPostgresql.port | quote }}
          - name: DATABASE_USERNAME
            value: {{ .Values.externalPostgresql.user | quote }}
          - name: DATABASE_NAME
            value: {{ .Values.externalPostgresql.database | quote }}
          {{- if .Values.externalPostgresql.existingSecret }}
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.externalPostgresql.existingSecret | quote }}
                key: {{ .Values.externalPostgresql.secretKeys.passwordKey | quote }}
          {{- else }}
          - name: DATABASE_PASSWORD
            value: {{ .Values.externalPostgresql.password | quote }}
          {{- end }}
          {{- end }}
          # ---------------------------------------------------------------------------------------------------------
          {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
