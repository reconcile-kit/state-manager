apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "state-manager.fullname" . }}
  labels:
    {{- include "state-manager.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "state-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "state-manager.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "state-manager.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if or (.Values.redis.enabled) (and (.Values.externalRedis.url) (not .Values.externalRedis.existingSecret)) }}
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "state-manager.fullname" . }}-redis-env
                key: REDIS_URL
          {{- else if and (not .Values.redis.enabled) (and (not .Values.externalRedis.url) (.Values.externalRedis.existingSecret)) }}
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.externalRedis.existingSecret }}
                key: url
          {{- end }}
          {{- if or (.Values.postgresql.enabled) (and (.Values.externalPostgresql.url) (not .Values.externalPostgresql.existingSecret)) }}
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: {{ include "state-manager.fullname" . }}-postgresql-env
                key: DATABASE_URL
          {{- else if and (not .Values.postgresql.enabled) (and (not .Values.externalPostgresql.url) (.Values.externalPostgresql.existingSecret)) }}
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: {{ .Values.externalPostgresql.existingSecret }}
                key: url
          {{- end }}
          {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
